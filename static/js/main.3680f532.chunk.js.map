{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","constants.js","containers/App.js","actions.js","reportWebVitals.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","React","connect","searchRobots","requestRobots","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"mSAceA,EAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GACxB,OACI,sBAAKC,UAAU,sDAAf,UACI,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,gCACI,6BAAKF,IACL,4BAAIC,WCYLK,EAhBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACI,8BACAA,EAAOC,KAAI,SAACC,EAAMC,GAClB,OACA,cAAC,EAAD,CAEAR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHZS,SCKEC,EAbG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAC9B,OACI,qBAAKV,UAAU,MAAf,SACI,uBACAA,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCCPI,EARA,SAACC,GACZ,OACI,qBAAKC,MAAO,CAACC,UAAY,SAAUC,OAAQ,iBAAkBC,OAAQ,SAArE,SACIJ,EAAMK,YCiBHC,G,wDAnBX,WAAYN,GAAQ,IAAD,8BACf,cAAMA,IACDO,MAAQ,CACTC,UAAU,GAHC,E,qDAOnB,SAAkBC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,oBAG9B,WACI,OAAIG,KAAKJ,MAAMC,SACJ,2DAEJG,KAAKX,MAAMK,a,GAhBCQ,cCFdC,EAAsB,sBAEtBC,EAAyB,yBACzBC,EAAyB,yBACzBC,EAAwB,wBCsB/BC,E,uKAEF,WACAP,KAAKX,MAAMmB,oB,oBAGX,WACI,MAA2DR,KAAKX,MAAxDoB,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,eAAgBhC,EAArC,EAAqCA,OAAQiC,EAA7C,EAA6CA,UACvCC,EAAiBlC,EAAOmC,QAAO,SAAAC,GACjC,OAAOA,EAAM3C,KAAK4C,cAAcC,SAASP,EAAYM,kBAEzD,OAAIJ,EACO,2CAGP,sBAAKrC,UAAU,KAAf,UACI,oBAAIA,UAAW,KAAf,yBACA,cAAC,EAAD,CAAWU,aAAc0B,IACzB,cAAC,EAAD,UACI,cAAC,EAAD,UACI,cAAC,EAAD,CAAUhC,OAAQkC,e,GApBxBK,IAAMf,WA8BTgB,eA9CS,SAAAtB,GACpB,MAAO,CACHa,YAAab,EAAMuB,aAAaV,YAChC/B,OAAQkB,EAAMwB,cAAc1C,OAC5BiC,UAAWf,EAAMwB,cAAcT,UAC/Bb,MAAOF,EAAMwB,cAActB,UAIR,SAACuB,GACzB,MAAO,CACHX,eAAgB,SAACY,GAAD,OAAWD,GCdHE,EDc2BD,EAAME,OAAOC,MCd9B,CACrCxC,KAAMkB,EACNuB,QAASH,KAFiB,IAACA,GDexBf,gBAAiB,kBAAMa,GCTK,SAACA,GAChCA,EAAS,CAACpC,KAAMmB,IAChBuB,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIV,EAAS,CAAEpC,KAAMoB,EAAwBqB,QAASK,OAC/DC,OAAM,SAAAlC,GAAK,OAAIuB,EAAS,CAAEpC,KAAMqB,EAAuBoB,QAAS5B,cDsC1DoB,CAA6CX,GE5C7C0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCCPO,G,MAAqB,CACxBhC,YAAa,KAYXiC,EAAqB,CACvB/B,WAAW,EACXjC,OAAQ,GACRoB,MAAO,ICZL6C,EAASC,yBAETC,EAAcC,YAAgB,CAAE3B,aDFV,WAA0C,IAAzCvB,EAAwC,uDAAlC6C,EAAoBM,EAAc,uDAAP,GAC1D,OAAOA,EAAO9D,OACLkB,EACM6C,OAAOC,OAAO,GAAIrD,EAAO,CAAEa,YAAasC,EAAOrB,UAE/C9B,GCHiCwB,cDavB,WAA0C,IAAzCxB,EAAwC,uDAAlC8C,EAAoBK,EAAc,uDAAP,GAC3D,OAAOA,EAAO9D,MACV,KAAKmB,EACD,OAAO4C,OAAOC,OAAO,GAAIrD,EAAO,CAAEe,WAAW,IACjD,KAAKN,EACD,OAAO2C,OAAOC,OAAO,GAAIrD,EAAO,CAAElB,OAAQqE,EAAOrB,QAASf,WAAW,IACzE,KAAKL,EACD,OAAO0C,OAAOC,OAAO,GAAIrD,EAAO,CAAEE,MAAOiD,EAAOrB,QAASf,WAAW,IACxE,QACI,OAAOf,MCrBbsD,EAAQC,YAAYN,EAAaO,YAAgBC,IAAOV,IAE9DW,IAASC,OACL,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACI,cAAC,EAAD,MACSM,SAASC,eAAe,SAKzCxB,M","file":"static/js/main.3680f532.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Card = ({name, email, id}) => {\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\n\r\nconst CardList = ({ robots }) => {\r\n    return (\r\n        <div>\r\n       {robots.map((user, i) => {\r\n        return (\r\n        <Card \r\n        key={i} \r\n        id={robots[i].id} \r\n        name={robots[i].name} \r\n        email={robots[i].email}/>\r\n        );\r\n    })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList;","import React from \"react\";\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input \r\n            className='pa3 ba b--green bg-lightest-blue'\r\n            type='search' \r\n            placeholder='search robots' \r\n            onChange={searchChange}\r\n            />\r\n        </div>    \r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY : 'scroll', border: '3px solid Blue', height: '800px' }}>\r\n           {props.children} \r\n        </div>\r\n        );\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from \"react\";\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1> Oooops That is not good </h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport './App.css';\r\nimport ErrorBoundry from \"../components/ErrorBoundry\";\r\n\r\nimport { requestRobots, setSearchField } from \"../actions\";\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n   return {\r\n       onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n       onRequestRobots: () => dispatch(requestRobots())\r\n   }\r\n}\r\n\r\nclass App extends React.Component {\r\n\r\n    componentDidMount() {\r\n    this.props.onRequestRobots();\r\n    }\r\n\r\n    render() {\r\n        const { searchField, onSearchChange, robots, isPending } = this.props;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n        if (isPending) {\r\n            return <h1> loading </h1>\r\n        } else {\r\n        return (\r\n            <div className='tc'>\r\n                <h1 className= 'f1'>RoboFriends</h1>\r\n                <SearchBox searchChange={onSearchChange}/>\r\n                <Scroll>\r\n                    <ErrorBoundry>\r\n                        <CardList robots={filteredRobots}/>\r\n                    </ErrorBoundry>\r\n                </Scroll>\r\n            </div>    \r\n        );\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n } from \"./constants\"\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n    \r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({type: REQUEST_ROBOTS_PENDING})\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}\r\n\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n } from \"./constants\"\r\n\r\n\r\n const initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, { searchField: action.payload });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true });\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false })\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false })\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunk from 'redux-thunk';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'tachyons';\r\nimport { searchRobots, requestRobots } from './reducers';\r\n\r\nconst logger = createLogger();\r\n\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\r\nconst store = createStore(rootReducer, applyMiddleware(thunk, logger))\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}